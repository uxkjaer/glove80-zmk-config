/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            flavor = "balanced";
        };

        layer_4: layer_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_4";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mo 4>, <&to 4>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2       &kp F3       &kp F4                 &kp F5                                                                                                                                          &kp F6                     &kp F7                        &kp F8    &kp F9               &kp F10
&kp EQUAL   &kp N1       &kp N2       &kp N3                 &kp N4                   &kp N5                                                                                            &kp N6               &kp N7                     &kp N8                        &kp N9    &kp N0               &kp MINUS
&kp TAB     &kp Q        &kp W        &kp E                  &hm LG(LS(R)) R          &hm SPACE T                                                                                       &kp Y                &kp U                      &kp I                         &kp O     &hm LA(LC(LG(P))) P  &kp BSLH
&kp ESC     &kp A        &kp S        &kp D                  &kp F                    &hm ENTER G                                                                                       &hm LS(LC(LG(H))) H  &kp J                      &kp K                         &kp L     &kp SEMI             &kp SQT
&kp GRAVE   &hm LG(Z) Z  &hm LG(X) X  &hm LG(C) C            &hm LG(V) V              &hm LS(RG(B)) B  &lt 3 DELETE   &kp LCTRL       &layer_td         &layer_4  &kp RCTRL  &kp RSHFT  &kp N                &kp M                      &kp COMMA                     &kp DOT   &kp FSLH             &kp PG_UP
&magic 2 0  &kp HOME     &kp END      &hm LC(LG(LEFT)) LEFT  &hm LC(LG(RIGHT)) RIGHT                   &kp BACKSPACE  &kp LEFT_SHIFT  &kp LEFT_COMMAND  &kp RALT  &kp RET    &kp SPACE                       &hm LA(LG(LEFT)) UP_ARROW  &hm LA(LG(RIGHT)) DOWN_ARROW  &kp LBKT  &kp RBKT             &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                 &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                           &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                            &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                          &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans          &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        Coding {
            bindings = <
&trans  &trans  &trans                &trans                 &trans                                                                                          &trans          &trans            &trans           &trans  &trans
&trans  &trans  &trans                &trans                 &trans         &trans                                                             &trans        &trans          &trans            &trans           &trans  &trans
&trans  &trans  &kp LBKT              &kp RBKT               &kp BSLH       &kp GRAVE                                                          &kp ASTERISK  &kp LESS_THAN   &kp GREATER_THAN  &kp SLASH        &trans  &trans
&trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE       &kp SINGLE_QUOTE                                                   &kp PLUS      &kp EQUAL       &kp COLON         &kp SEMICOLON    &trans  &trans
&trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &kp DOUBLE_QUOTES  &trans  &trans  &trans  &trans  &trans  &trans  &kp MINUS     &kp UNDERSCORE  &kp QUESTION      &kp EXCLAMATION  &trans  &trans
&trans  &trans  &trans                &trans                 &trans                            &trans  &trans  &trans  &trans  &trans  &trans                &trans          &trans            &trans           &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans          &trans          &trans                                                                                &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans                                                       &trans  &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans          &mmv MOVE_UP    &trans           &trans                                                       &trans  &none           &msc SCRL_UP    &trans           &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans                                                       &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans  &trans  &trans  &to 0   &to 0   &trans    &trans     &trans  &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans          &trans          &trans                   &trans  &trans  &trans  &trans  &mkp MB1  &mkp RCLK          &trans          &trans          &trans           &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SetRGB {
            if-layers = <1>;
            then-layer = <1>;
        };
    };
};
